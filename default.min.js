(function(){"use strict";Bridge.define("Default.PositionedObject",{gardenPosition:null,garden:null,id:null});Bridge.define("Default.Animal.AnimalState",{statics:{appear:0,visiting:1,resident:2},$enum:!0});Bridge.define("Game",{statics:{garden:null,animals:null,config:{init:function(){this.garden=[];this.animals=[];Bridge.ready(this.main)}},main:function(){for(var item,$t=Bridge.getEnumerator(Bridge.merge(new JsonDictionary,gamedata.animals));$t.moveNext();)item=$t.getCurrent(),Bridge.get(Game).animals.push(Bridge.get(Game).loadAnimal(item.key,item.value));Bridge.global.setInterval(Bridge.get(Game).interval,4e3)},loadAnimal:function(key,valueInput){var $t,result=new Default.Animal,value=Bridge.merge(new JsonDictionary,valueInput),item;for(result.id=key,$t=Bridge.getEnumerator(value);$t.moveNext();){item=$t.getCurrent();switch(item.key){case"name":result[item.key]=item.value;break;case"appear":case"resident":result[item.key]=Bridge.as(item.value,Array).map(Bridge.get(Game).loadRequirement);break;default:throw new Bridge.ArgumentException("Unknown property: "+key);}}return result},getEatableById:function(value){var index1=Bridge.get(Game).animals.indexOf(value);if(index1!==-1)return Bridge.get(Game).animals[index1];throw new Bridge.ArgumentException("Unknown id: "+value);},loadRequirement:function(input){switch(Bridge.cast(input.type,String)){case"EatRequirement":return Bridge.merge(new Default.EatRequirement,input);default:throw new Bridge.ArgumentException("Requirement type: "+input.type);}},httpGet:function(value){var xmlHttp=new XMLHttpRequest;return xmlHttp.open("GET",value,!1),xmlHttp.send(null),xmlHttp.responseText},interval:function(){for(var $t1,$t2,item,item1,itemAnimalAs,wants,item2,$t=Bridge.getEnumerator(Bridge.get(Game).animals);$t.moveNext();)item=$t.getCurrent(),Bridge.Linq.Enumerable.from(item.appear).all($_.Game.f1)&&(item.state=Default.Animal.AnimalState.appear);for($t1=Bridge.getEnumerator(Bridge.get(Game).garden);$t1.moveNext();)if(item1=$t1.getCurrent(),Bridge.is(item1,Default.Animal)){for(itemAnimalAs=Bridge.as(item1,Default.Animal),wants=[],$t2=Bridge.getEnumerator(itemAnimalAs.getcurrentRequirements());$t2.moveNext();)item2=$t2.getCurrent(),wants.push.apply(,item2.getWantsAdd());itemAnimalAs.events=wants.map($_.Game.f2)}}}});var $_={};Bridge.ns("Game",$_);Bridge.apply($_.Game,{f1:function(v){return v.getNumerator()===v.getDenominator()},f2:function(v){return new EatEvent(v)}});Bridge.define("Default.IAnimalEvent");Bridge.define("Default.IRequirement");Bridge.define("Default.Vector2",{statics:{op_LessThan:function(a,b){return a.x<b.x&&a.y<b.y},op_GreaterThan:function(a,b){return a.x>b.x&&a.y>b.y},op_LessThanOrEqual:function(a,b){return a.x<=b.x&&a.y<=b.y},op_GreaterThanOrEqual:function(a,b){return a.x>=b.x&&a.y>=b.y},op_Addition:function(a,b){return a.x+=b.x,a.y+=b.y,a.$clone()},op_Subtraction:function(a,b){return a.x-=b.x,a.y-=b.y,a.$clone()},op_Multiply:function(a,b){return a.x*=b,a.y*=b,a.$clone()},op_Multiply$1:function(a,b){return b.x*=a,b.y*=a,b.$clone()},op_Division:function(a,b){return a.x=Bridge.Int.div(a.x,b),a.y=Bridge.Int.div(a.y,b),a.$clone()},getDefaultValue:function(){return new Default.Vector2}},x:0,y:0,constructor$1:function(x,y){this.x=x;this.y=y},constructor:function(){},execute:function(action){this.x=action(this.x);this.y=action(this.y)},getHashCode:function(){var hash=17;return hash=hash*23+(this.x==null?0:Bridge.getHashCode(this.x)),hash*23+(this.y==null?0:Bridge.getHashCode(this.y))},equals:function(o){return Bridge.is(o,Default.Vector2)?Bridge.equals(this.x,o.x)&&Bridge.equals(this.y,o.y):!1},$clone:function(to){var s=to||new Default.Vector2;return s.x=this.x,s.y=this.y,s}});Bridge.define("Default.Eatable",{inherits:[Default.PositionedObject],getEatenBy:function(){Bridge.Linq.Enumerable.from(this.garden).forEach(Bridge.fn.bind(this,$_.Default.Eatable.f1))}});Bridge.ns("Default.Eatable",$_);Bridge.apply($_.Default.Eatable,{f1:function(v,pos){return v===this?(this.garden.splice(pos,1),!1):!0}});Bridge.define("EatEvent",{inherits:[Default.IAnimalEvent],eating:null,constructor:function(eating){this.eating=eating}});Bridge.define("Default.Requirement",{inherits:[Default.IRequirement],animalRuntime:null,config:{events:{numeratorChanged:null}},getWantsAdd:function(){return[]}});Bridge.define("Default.Animal",{inherits:[Default.Eatable],name:null,appear:null,visit:null,resident:null,state:0,events:null,config:{init:function(){this.events=[]}},getcurrentRequirements:function(){switch(this.state){case Default.Animal.AnimalState.appear:return this.visit;case Default.Animal.AnimalState.visiting:return this.resident;case Default.Animal.AnimalState.resident:default:throw new Bridge.NotImplementedException;}},setcurrentRequirements:function(value){var pointer=this.getcurrentRequirements();pointer=value},eat:function(value){value.getEatenBy(this)}});Bridge.define("Default.EatRequirement",{inherits:[Default.Requirement],eatNumNeeded:0,value:null,getDenominator:function(){return this.eatNumNeeded},getNumerator:function(){throw new Bridge.NotImplementedException;},getText:function(){throw new Bridge.NotImplementedException;},getWantsAdd:function(){return[Bridge.get(Game).getEatableById(this.value)]}});Bridge.define("Default.Plant",{inherits:[Default.Eatable],name:null,getEatenBy:function(eatenBy){Default.Eatable.prototype.getEatenBy.call(this,eatenBy)}});Bridge.init()})(this);